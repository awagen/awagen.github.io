<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Kolibri Documentation</title><link>http://awagen.github.io/</link><description>Recent content in Home on Kolibri Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Sep 2021 20:08:00 +0200</lastBuildDate><atom:link href="http://awagen.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Basics</title><link>http://awagen.github.io/kolibri/kolibri-base/2-mechanisms/1-overview/</link><pubDate>Thu, 09 Sep 2021 20:08:00 +0200</pubDate><guid>http://awagen.github.io/kolibri/kolibri-base/2-mechanisms/1-overview/</guid><description>Basics First, all batches are represented by an ActorRunnable object, that on execution provides a tuple of a KillSwitch and Future[Done] which completes when the execution completes. The KillSwitch allows killing the execution if indicated. The criteria whether an execution is to be stopped is represented by an ExecutionExpectation instance, which can contain multiple failedWhenMetExpectations, that is e.g if a certain rate or number of failed data sample processings or a timeout is exceeded.</description></item><item><title>DataType Categories</title><link>http://awagen.github.io/kolibri/kolibri-datatypes/1-types/1-categories/</link><pubDate>Sun, 22 Aug 2021 22:20:00 +0200</pubDate><guid>http://awagen.github.io/kolibri/kolibri-datatypes/1-types/1-categories/</guid><description>Lets have a look at the distinct categories of data structures provided by the kolibri-datatypes project (might not be fully exhaustive).
Indexed Generators Indexed Generators allow to generate elements on demand by index. It provides size without having to iterate over the elements, provides Iterator of its contains elements, methods to retrieve generators of subparts of the original generator and mapping that transforms each generated element by the specified mapping function.</description></item><item><title>Getting it started</title><link>http://awagen.github.io/kolibri/kolibri-base/1-basics/1-runningit/</link><pubDate>Sat, 21 Aug 2021 19:36:00 +0200</pubDate><guid>http://awagen.github.io/kolibri/kolibri-base/1-basics/1-runningit/</guid><description>Lets first dive into how to get the project started on your machine. There are multiple configuration options available, which will be detailled in the following.
Starting locally with docker-compose Find the docker compose in project root. If youre referencing an existing image, you dont need to build anything beforehand. In case you want to start a local version, make sure to package the jar, create the properly tagged docker image and reference this in the docker-compose.</description></item><item><title>Monitoring</title><link>http://awagen.github.io/kolibri/kolibri-base/1-basics/2-monitoring/</link><pubDate>Sat, 21 Aug 2021 22:20:08 +0200</pubDate><guid>http://awagen.github.io/kolibri/kolibri-base/1-basics/2-monitoring/</guid><description>Metrics with Kamon You&amp;rsquo;ll find the kamon configuration file within the resources/metrics folder (kamon.conf). It contains instrumentation configuration including filters for which elements metrics shall be collected as well as the configuration for the exposed server providing the status page mentioned above.
An example dashboard can be found in the grafana/dashboards folder. It provides general metrics regarding system performance. The below provides a description of the distinct displays in the example dashboard, for screenshot of the dashboard see below.</description></item><item><title>Executing examples</title><link>http://awagen.github.io/kolibri/kolibri-base/1-basics/3-executeexamplejob/</link><pubDate>Sat, 21 Aug 2021 20:20:35 +0200</pubDate><guid>http://awagen.github.io/kolibri/kolibri-base/1-basics/3-executeexamplejob/</guid><description>An example job definition for a parameter grid search evaluating search metrics against a given endpoint is provided within the scripts-folder. The definition is contained in the file testSearchEval.json, that can be send to the respective Kolibri endpoints (see start_searcheval.sh). Where the response is written is configured via properties/env variables (see respective part of the documentation). Note that the execution below makes a few assumptions for the processing to work.</description></item></channel></rss>